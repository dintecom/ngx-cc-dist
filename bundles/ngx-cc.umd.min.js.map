{"version":3,"sources":["../../../projects/ngx-cc/src/lib/ngx-cc.service.ts","../../../node_modules/tslib/tslib.es6.js","../../../projects/ngx-cc/src/lib/validators/ngx-cc.validator.ts","../../../projects/ngx-cc/src/lib/ngx-cc.config.ts","../../../projects/ngx-cc/src/lib/ngx-cc.icons.ts","../../../projects/ngx-cc/src/lib/ngx-cc.component.ts","../../../projects/ngx-cc/src/lib/validators/ngx-cc-date.validator.ts","../../../projects/ngx-cc/src/lib/cc-date/cc-date.component.ts","../../../projects/ngx-cc/src/lib/directives/number-only/number-only.directive.ts","../../../projects/ngx-cc/src/lib/directives/format-date/format-date.directive.ts","../../../projects/ngx-cc/src/lib/cc-cvv/cc-cvv.component.ts","../../../projects/ngx-cc/src/lib/ngx-cc.module.ts"],"names":["NgxCcService","prototype","getCardType","cardNumber","creditCardType","prettyCardNumber","cardType","card","getTypeInfo","offsets","concat","gaps","length","components","i","start","end","Math","min","push","substring","join","Injectable","args","providedIn","Object","create","__read","o","n","m","Symbol","iterator","r","e","call","ar","next","done","value","error","CardValidator","control","validator","number","isValid","invalidCardNumber","CC_CARD_ICONS_TOKEN","InjectionToken","externalCardIcons","default","visa","mastercard","american-express","diners-club","discover","jcb","unionpay","maestro","mir","elo","hiper","hipercard","NgxCcComponent","injector","elRef","fm","parentForm","parentFormGroup","defaultErrorStateMatcher","creditCardService","ccCardIcons","_this","this","_disabled","_defaultStyles","_required","_cardIcons","ngControl","focused","errorState","cardIcon","stateChanges","Subject","id","nextId","describedBy","_formSubmitSubscription","ngSubmit","subscribe","markAsTouched","monitor","nativeElement","origin","defineProperty","_value","onChange","_placeholder","placeholder","replace","req","coerceBooleanProperty","disabled","dis","val","empty","ngOnInit","get","NgControl","valueAccessor","ngDoCheck","updateErrorState","writeValue","registerOnChange","fn","registerOnTouched","onTouched","setDescribedByIds","ids","onContainerClick","event","target","tagName","toLowerCase","querySelector","focus","updateIcon","markAsDirty","maxNumberLimit","max","apply","arguments","__spread","lengths","type","updateOnTouch","ngOnDestroy","unsubscribe","stopMonitoring","complete","oldState","parent","matcher","newState","isErrorState","Component","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","NG_VALIDATORS","useValue","ɵ0","MatFormFieldControl","encapsulation","ViewEncapsulation","None","Injector","ElementRef","FocusMonitor","NgForm","decorators","Optional","FormGroupDirective","ErrorStateMatcher","Inject","Input","HostBinding","CardExpirationValidator","date","expirationDate","month","year","invalidDate","CcDateComponent","cardDate","onChanges","updateDate","ɵ0$1","NumberOnlyDirective","_ngxNumberOnly","flag","onKeyDown","ngxNumberOnly","indexOf","keyCode","ctrlKey","metaKey","shiftKey","preventDefault","ngxMaxLength","Directive","HostListener","FormatDateDirective","isUpdated","formatDate","eventValue","parseInt","setValue","CcCvvComponent","cardCvv","maxCvvLength","_cvvSize","updateValueAndValidity","validate","cvv","cvvSize","invalidCvv","updateCvv","NgxCcModule","forRoot","config","ngModule","assign","cardIcons","NgModule","declarations","imports","CommonModule","FormsModule","MatInputModule","MatFormFieldModule","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport creditCardType from 'credit-card-type';\nimport { CardConfig } from './ngx-cc.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxCcService {\n\n  getCardType(cardNumber: number | string): CardConfig {\n    return creditCardType(cardNumber)[0];\n  }\n\n  prettyCardNumber(cardNumber: string, cardType) {\n    const card = creditCardType.getTypeInfo(cardType);\n\n    if (card) {\n      const offsets = [].concat(0, card.gaps, cardNumber.length);\n      const components = [];\n\n      for (let i = 0; offsets[i] < cardNumber.length; i++) {\n        const start = offsets[i];\n        const end = Math.min(offsets[i + 1], cardNumber.length);\n        components.push(cardNumber.substring(start, end));\n      }\n\n      return components.join(' ');\n    }\n\n    return cardNumber;\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { FormControl } from '@angular/forms';\nimport validator from 'card-validator';\n\nexport const CardValidator = (control: FormControl) => {\n    return validator.number(control.value).isValid ? null : { invalidCardNumber: true };\n};\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport interface CardIcons {\r\n  default: string;\r\n  visa: string;\r\n  mastercard: string;\r\n  'american-express': string;\r\n  'diners-club': string;\r\n  discover: string;\r\n  jcb: string;\r\n  unionpay: string;\r\n  maestro: string;\r\n  mir: string;\r\n  elo: string;\r\n  hiper: string;\r\n  hipercard: string;\r\n}\r\n\r\nexport interface CcConfig {\r\n  cardIcons: Partial<CardIcons>;\r\n}\r\n\r\nexport const CC_CARD_ICONS_TOKEN = new InjectionToken<string>('CC_CARD_ICONS_TOKEN');\r\n","import { CardIcons } from './ngx-cc.config';\n\nexport const externalCardIcons: CardIcons = {\n  default: 'https://img.icons8.com/color/40/000000/bank-card-back-side.png',\n  visa: 'https://img.icons8.com/color/40/000000/visa.png',\n  mastercard: 'https://img.icons8.com/color/40/000000/mastercard.png',\n  'american-express': 'https://img.icons8.com/color/40/000000/amex.png',\n  'diners-club': 'https://img.icons8.com/color/40/000000/diners-club.png',\n  discover: 'https://img.icons8.com/color/40/000000/discover.png',\n  jcb: 'https://img.icons8.com/color/40/000000/jcb.png',\n  unionpay: 'https://img.icons8.com/color/40/000000/unionpay.png',\n  maestro: 'https://img.icons8.com/color/40/000000/maestro.png',\n  mir: 'https://img.icons8.com/color/40/000000/mir.png',\n  elo: 'https://img.icons8.com/color/40/000000/bank-card-back-side.png', // default\n  hiper: 'https://img.icons8.com/color/40/000000/bank-card-back-side.png', // default\n  hipercard: 'https://img.icons8.com/color/40/000000/bank-card-back-side.png', // default\n};\n","import {\n  Component, HostBinding, Input, Inject, Injector, Optional,\n  OnInit, OnDestroy, DoCheck, forwardRef,\n  ViewEncapsulation, ElementRef\n} from '@angular/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, NG_VALIDATORS, NgControl, NgForm, FormGroupDirective, FormControl } from '@angular/forms';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport { Subject, Subscription } from 'rxjs';\n\nimport { NgxCcService } from './ngx-cc.service';\nimport { CardConfig } from './ngx-cc.model';\nimport { CardValidator } from './validators/ngx-cc.validator';\nimport { CardIcons, CC_CARD_ICONS_TOKEN } from './ngx-cc.config';\nimport { externalCardIcons } from './ngx-cc.icons';\n\n@Component({\n  selector: 'ngx-cc',\n  template: `\n      <div class=\"ngx-cc-container\" [ngClass]=\"styleClass\">\n        <input *ngIf=\"!defaultStyles\"\n        ngxNumberOnly\n        [ngxMaxLength]=\"maxNumberLimit\"\n        class=\"ngx-cc-input\"\n        type=\"text\"\n        [required]=\"required\"\n        [disabled]=\"disabled\"\n        [value]=\"cardNumber\"\n        (blur)=\"updateOnTouch()\"\n        (input)=\"updateIcon($event)\" />\n\n        <input *ngIf=\"defaultStyles\"\n        ngxNumberOnly\n        [ngxMaxLength]=\"maxNumberLimit\"\n        class=\"ngx-cc-input-default\"\n        type=\"text\"\n        [placeholder]=\"placeholder\"\n        [required]=\"required\"\n        [disabled]=\"disabled\"\n        [value]=\"cardNumber\"\n        [ngStyle]=\"{'background-image': 'url(' + cardIcon + ')'}\"\n        (blur)=\"updateOnTouch()\"\n        (input)=\"updateIcon($event)\" />\n        <img *ngIf=\"!defaultStyles\" class=\"ngx-cc-suffix\" [src]=\"cardIcon\" />\n      </div>\n      `,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NgxCcComponent),\n      multi: true\n    },\n    {\n      provide: NG_VALIDATORS,\n      useValue: CardValidator,\n      multi: true\n    },\n    {\n      provide: MatFormFieldControl,\n      useExisting: forwardRef(() => NgxCcComponent),\n      multi: true\n    }\n  ],\n  styles: [\n    `\n    .ngx-cc-container {\n      display: flex;\n      position: relative;\n    }\n    .ngx-cc-input {\n      border: none;\n      background: none;\n      padding: 0;\n      outline: none;\n      font: inherit;\n      text-align: left;\n    }\n    .ngx-cc-input-default {\n      background-position: 100%;\n      background-repeat: no-repeat;\n      background-size: 40px;\n    }\n    .ngx-cc-form-field div.mat-form-field-wrapper div.mat-form-field-flex {\n      align-items: flex-end;\n    }\n    .ngx-cc-suffix {\n      position: absolute;\n      top: -1.5rem;\n      right: 0;\n      width: 40px;\n      height: 40px;\n    }\n    `\n  ],\n  encapsulation: ViewEncapsulation.None\n})\nexport class NgxCcComponent implements OnInit, OnDestroy, DoCheck, ControlValueAccessor, MatFormFieldControl<NgxCcComponent> {\n\n  static nextId = 0;\n  @Input() styleClass: string;\n  @Input()\n  get value() {\n    return this._value;\n  }\n  set value(cardNumber) {\n    this._value = cardNumber;\n    this.onChange(cardNumber);\n    this.stateChanges.next();\n  }\n\n  @Input()\n  get placeholder() {\n    return this._placeholder;\n  }\n  set placeholder(placeholder: string) {\n    this._placeholder = placeholder;\n    this.stateChanges.next();\n  }\n\n  @Input()\n  get empty() {\n    const value = this.cardNumber.replace(/\\s/g, '');\n    return !(!!value);\n  }\n\n  @Input()\n  get required() {\n    return this._required;\n  }\n  set required(req: boolean) {\n    this._required = coerceBooleanProperty(req);\n    this.stateChanges.next();\n  }\n\n  @Input()\n  get disabled() {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(dis: boolean) {\n    this._disabled = coerceBooleanProperty(dis);\n    this.stateChanges.next();\n  }\n\n  @Input()\n  get defaultStyles() {\n    return this._defaultStyles;\n  }\n  set defaultStyles(val: any) {\n    this._defaultStyles = coerceBooleanProperty(val);\n  }\n  // tslint:disable-next-line: variable-name\n  private _value: any;\n  // tslint:disable-next-line: variable-name\n  private _placeholder: string;\n  // tslint:disable-next-line: variable-name\n  private _disabled = false;\n  // tslint:disable-next-line: variable-name\n  private _defaultStyles = false;\n  // tslint:disable-next-line: variable-name\n  private _required = false;\n  // tslint:disable-next-line: variable-name\n  private _formSubmitSubscription: Subscription;\n  // tslint:disable-next-line: variable-name\n  private _cardIcons = this.ccCardIcons || externalCardIcons;\n  ngControl: NgControl = null;\n  focused = false;\n  errorState = false;\n  cardNumber = '';\n  cardIcon = this._cardIcons.default;\n  card: CardConfig;\n  onChange: any;\n  onTouched: any;\n  stateChanges = new Subject<void>();\n  maxNumberLimit: number;\n  @HostBinding() id = `ngx-cc${NgxCcComponent.nextId}`;\n  @HostBinding('attr.aria-describedby') describedBy = '';\n  @HostBinding('class.floating')\n  get shouldLabelFloat() {\n    return this.focused || !this.empty;\n  }\n\n  constructor(\n    private injector: Injector,\n    private elRef: ElementRef<HTMLElement>,\n    private fm: FocusMonitor,\n    @Optional() private parentForm: NgForm,\n    @Optional() private parentFormGroup: FormGroupDirective,\n    private defaultErrorStateMatcher: ErrorStateMatcher,\n    private creditCardService: NgxCcService,\n    @Optional() @Inject(CC_CARD_ICONS_TOKEN) private ccCardIcons: CardIcons\n  ) {\n    const parent = this.parentFormGroup || this.parentForm;\n    if (parent){\n      this._formSubmitSubscription = parentFormGroup.ngSubmit.subscribe(() => {\n        this.ngControl.control.markAsTouched();\n      });\n    }\n\n    fm.monitor(elRef.nativeElement, true).subscribe(origin => {\n      this.focused = !!origin;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this.ngControl = this.injector.get(NgControl);\n    if (this.ngControl !== null) {\n      // Setting the value accessor directly (instead of using\n      // the providers) to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  writeValue(value: string) {\n    this.cardNumber = value || '';\n  }\n\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  setDescribedByIds(ids: string[]) {\n    this.describedBy = ids.join(' ');\n  }\n\n  onContainerClick(event: MouseEvent) {\n    if ((event.target as Element).tagName.toLowerCase() !== 'input') {\n      this.elRef.nativeElement.querySelector('input').focus();\n    }\n  }\n\n  updateIcon(event: Event) {\n    const value = (event.target as HTMLInputElement).value.replace(/\\s/g, '');\n    let cardType = 'default';\n    this.onChange(value);\n    this.ngControl.control.markAsDirty();\n    this.card = this.creditCardService.getCardType(value);\n    if (this.card) {\n      this.maxNumberLimit = Math.max(...this.card.lengths);\n      cardType = this.card.type;\n    }\n    this.cardNumber = this.creditCardService.prettyCardNumber(value, cardType);\n    this.cardIcon = !value ? this._cardIcons.default : this._cardIcons[cardType];\n  }\n\n  updateOnTouch() {\n    if (this.ngControl) {\n      this.onTouched(this.ngControl.control.value);\n      this.ngControl.control.markAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._formSubmitSubscription) {\n      this._formSubmitSubscription.unsubscribe();\n    }\n    this.fm.stopMonitoring(this.elRef.nativeElement);\n    this.stateChanges.complete();\n  }\n\n  updateErrorState() {\n    const oldState = this.errorState;\n    const parent = this.parentFormGroup || this.parentForm;\n    const matcher = this.defaultErrorStateMatcher;\n    const control = this.ngControl ? this.ngControl.control as FormControl : null;\n    const newState = matcher.isErrorState(control, parent);\n\n    if (newState !== oldState) {\n      this.errorState = newState;\n      this.stateChanges.next();\n    }\n  }\n}\n","import { FormControl } from '@angular/forms';\nimport validator from 'card-validator';\n\nexport const CardExpirationValidator = (control: FormControl) => {\n    const date = validator.expirationDate(control.value);\n    return (date.month && date.year) ? null : { invalidDate: true };\n};\n","import {\n  Component, HostBinding, Input, Injector, Optional,\n  OnInit, OnDestroy, DoCheck, forwardRef,\n  ViewEncapsulation, ElementRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, NG_VALIDATORS, NgControl, NgForm, FormGroupDirective, FormControl } from '@angular/forms';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport { Subject, Subscription } from 'rxjs';\n\nimport { CardExpirationValidator } from '../validators/ngx-cc-date.validator';\n\n@Component({\n  selector: 'ngx-cc-date',\n  template: `\n    <div class=\"ngx-cc-date-container\" [ngClass]=\"styleClass\">\n      <input\n      ngxNumberOnly\n      ngxFormatDate\n      maxlength=\"7\"\n      [ngClass]=\"{'ngx-cc-date-input': !defaultStyles}\"\n      type=\"text\"\n      [placeholder]=\"placeholder || ''\"\n      [required]=\"required\"\n      [disabled]=\"disabled\"\n      [value]=\"cardDate\"\n      (blur)=\"updateOnTouch()\"\n      (input)=\"updateDate()\"\n      >\n    </div>\n  `,\n  styles: [`\n    .ngx-cc-date-input {\n      border: none;\n      background: none;\n      padding: 0;\n      outline: none;\n      font: inherit;\n      text-align: left;\n    }\n  `],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => CcDateComponent),\n      multi: true\n    },\n    {\n      provide: NG_VALIDATORS,\n      useValue: CardExpirationValidator,\n      multi: true\n    },\n    {\n      provide: MatFormFieldControl,\n      useExisting: forwardRef(() => CcDateComponent),\n      multi: true\n    }\n  ],\n  encapsulation: ViewEncapsulation.None\n})\nexport class CcDateComponent implements OnInit, OnDestroy, DoCheck, ControlValueAccessor, MatFormFieldControl<CcDateComponent> {\n\n  static nextId = 0;\n  @Input() styleClass: string;\n  @Input()\n  get value() {\n    return this._value;\n  }\n  set value(cardNumber) {\n    this._value = cardNumber;\n    this.onChanges(cardNumber);\n    this.stateChanges.next();\n  }\n\n  @Input()\n  get placeholder() {\n    return this._placeholder;\n  }\n  set placeholder(placeholder: string) {\n    this._placeholder = placeholder;\n    this.stateChanges.next();\n  }\n\n  @Input()\n  get empty() {\n    return !(!!this.cardDate);\n  }\n\n  @Input()\n  get required() {\n    return this._required;\n  }\n  set required(req: boolean) {\n    this._required = coerceBooleanProperty(req);\n    this.stateChanges.next();\n  }\n\n  @Input()\n  get disabled() {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(dis: boolean) {\n    this._disabled = coerceBooleanProperty(dis);\n    this.stateChanges.next();\n  }\n\n  @Input()\n  get defaultStyles() {\n    return this._defaultStyles;\n  }\n  set defaultStyles(val: any) {\n    this._defaultStyles = coerceBooleanProperty(val);\n  }\n  // tslint:disable-next-line: variable-name\n  private _value: any;\n  // tslint:disable-next-line: variable-name\n  private _placeholder: string;\n  // tslint:disable-next-line: variable-name\n  private _disabled = false;\n  // tslint:disable-next-line: variable-name\n  private _defaultStyles = false;\n  // tslint:disable-next-line: variable-name\n  private _required = false;\n  // tslint:disable-next-line: variable-name\n  private _formSubmitSubscription: Subscription;\n  ngControl: NgControl = null;\n  focused = false;\n  errorState = false;\n  stateChanges = new Subject<void>();\n  cardDate = '';\n  onChanges: any;\n  onTouched: any;\n\n  @HostBinding() id = `ngx-cc${CcDateComponent.nextId}`;\n  @HostBinding('attr.aria-describedby') describedBy = '';\n  @HostBinding('class.floating')\n  get shouldLabelFloat() {\n    return this.focused || !this.empty;\n  }\n\n  constructor(\n    private injector: Injector,\n    private elRef: ElementRef<HTMLElement>,\n    private fm: FocusMonitor,\n    @Optional() private parentForm: NgForm,\n    @Optional() private parentFormGroup: FormGroupDirective,\n    private defaultErrorStateMatcher: ErrorStateMatcher,\n  ) {\n    const parent = this.parentFormGroup || this.parentForm;\n    if (parent){\n      this._formSubmitSubscription = parentFormGroup.ngSubmit.subscribe(() => {\n        this.ngControl.control.markAsTouched();\n      });\n    }\n\n    fm.monitor(elRef.nativeElement, true).subscribe(origin => {\n      this.focused = !!origin;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this.ngControl = this.injector.get(NgControl);\n    if (this.ngControl !== null) {\n      // Setting the value accessor directly (instead of using\n      // the providers) to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  writeValue(val: string) {\n    this.cardDate = val || '';\n  }\n\n  registerOnChange(fn: any) {\n    this.onChanges = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  setDescribedByIds(ids: string[]) {\n    this.describedBy = ids.join(' ');\n  }\n\n  onContainerClick(event: MouseEvent) {\n    if ((event.target as Element).tagName.toLowerCase() !== 'input') {\n      this.elRef.nativeElement.querySelector('input').focus();\n    }\n  }\n\n  updateDate() {\n    if (this.ngControl) {\n      this.onChanges(this.ngControl.control.value);\n      this.ngControl.control.markAsDirty();\n      this.cardDate = this.ngControl.control.value;\n    }\n  }\n\n  updateOnTouch() {\n    if (this.ngControl) {\n      this.onTouched(this.ngControl.control.value);\n      this.ngControl.control.markAsTouched();\n      this.cardDate = this.ngControl.control.value;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._formSubmitSubscription) {\n      this._formSubmitSubscription.unsubscribe();\n    }\n    this.fm.stopMonitoring(this.elRef.nativeElement);\n    this.stateChanges.complete();\n  }\n\n  updateErrorState() {\n    const oldState = this.errorState;\n    const parent = this.parentFormGroup || this.parentForm;\n    const matcher = this.defaultErrorStateMatcher;\n    const control = this.ngControl ? this.ngControl.control as FormControl : null;\n    const newState = matcher.isErrorState(control, parent);\n\n    if (newState !== oldState) {\n      this.errorState = newState;\n      this.stateChanges.next();\n    }\n  }\n}\n","import { ElementRef, Directive, Input, HostListener } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n@Directive({\n  selector: '[ngxNumberOnly]'\n})\nexport class NumberOnlyDirective {\n\n  @Input()\n  get ngxNumberOnly() {\n    return this._ngxNumberOnly;\n  }\n\n  set ngxNumberOnly(flag: boolean) {\n    this._ngxNumberOnly = coerceBooleanProperty(flag);\n  }\n\n  @Input() ngxMaxLength: number;\n\n  private _ngxNumberOnly: boolean;\n\n  @HostListener('keydown', ['$event']) onKeyDown(event: KeyboardEvent) {\n    if (this.ngxNumberOnly) {\n      if ([46, 8, 9, 27, 13, 110, 190].indexOf(event.keyCode) !== -1 ||\n        // Allow: Ctrl+A\n        (event.keyCode === 65 && (event.ctrlKey || event.metaKey)) ||\n        // Allow: Ctrl+C\n        (event.keyCode === 67 && (event.ctrlKey || event.metaKey)) ||\n        // Allow: Ctrl+V\n        (event.keyCode === 86 && (event.ctrlKey || event.metaKey)) ||\n        // Allow: Ctrl+X\n        (event.keyCode === 88 && (event.ctrlKey || event.metaKey)) ||\n        // Allow: home, end, left, right\n        (event.keyCode >= 35 && event.keyCode <= 39)) {\n        // let it happen, don't do anything\n        return;\n      }\n      // Ensure that it is a number and stop the keypress\n      if ((event.shiftKey || (event.keyCode < 48 || event.keyCode > 57)) && (event.keyCode < 96 || event.keyCode > 105)) {\n        event.preventDefault();\n      }\n      // If creditcard number exceeds the limit provided by braintree api return false.\n      if (this.ngxMaxLength) {\n        const value = (event.target as HTMLInputElement).value.replace(/\\s/g, '').length;\n        return (value < this.ngxMaxLength);\n      }\n    }\n  }\n\n  constructor(private elRef: ElementRef<HTMLInputElement>) { }\n\n}\n","import { Directive, HostListener } from '@angular/core';\nimport { NgControl } from '@angular/forms';\n\n@Directive({\n  selector: '[ngxFormatDate]'\n})\nexport class FormatDateDirective {\n\n  /**\n   * isUpdated - check if input is udpated or not\n   */\n  isUpdated = false;\n\n  constructor(private control: NgControl) { }\n\n  @HostListener('input', ['$event']) formatDate(event: KeyboardEvent) {\n    const eventValue = (event.target as HTMLInputElement).value;\n    const value = parseInt(eventValue, 10);\n    if (!eventValue) {\n      this.isUpdated = false;\n      this.control.control.setValue(eventValue);\n      return;\n    }\n    if (!this.isUpdated && value >= 10 && value <= 12) {\n      this.control.control.setValue(`${value} / `);\n      this.isUpdated = true;\n    } else if (!this.isUpdated && value >= 2 && value <= 9) {\n      this.control.control.setValue(`0${value} / `);\n      this.isUpdated = true;\n    } else if (\n      !this.isUpdated &&\n      eventValue.length === 2 && (value < 12 && value > 0)) {\n      this.control.control.setValue(`${eventValue} / `);\n      this.isUpdated = true;\n    } else {\n      this.control.control.setValue(eventValue);\n    }\n  }\n\n}\n","import {\n  Component, HostBinding, Input, Injector, Optional,\n  OnInit, OnDestroy, DoCheck, forwardRef,\n  ElementRef\n} from '@angular/core';\nimport {\n  ControlValueAccessor, NG_VALUE_ACCESSOR, NG_VALIDATORS,\n  NgControl, AbstractControl, ValidationErrors, NgForm,\n  FormGroupDirective, FormControl\n} from '@angular/forms';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport { Subject, Subscription } from 'rxjs';\nimport validator from 'card-validator';\n\n@Component({\n  selector: 'ngx-cc-cvv',\n  template: `\n    <div class=\"ngx-cc-cvv-container\" [ngClass]=\"styleClass\">\n      <input\n        ngxNumberOnly\n        [ngxMaxLength]=\"maxCvvLength\"\n        [ngClass]=\"{'ngx-cc-cvv-input': !defaultStyles}\"\n        type=\"text\"\n        [placeholder]=\"placeholder || ''\"\n        [required]=\"required\"\n        [disabled]=\"disabled\"\n        [value]=\"cardCvv\"\n        (blur)=\"updateOnTouch()\"\n        (input)=\"updateCvv($event)\">\n    </div>\n  `,\n  styles: [`\n    .ngx-cc-cvv-input {\n      border: none;\n      background: none;\n      padding: 0;\n      outline: none;\n      font: inherit;\n      text-align: left;\n    }\n  `],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => CcCvvComponent),\n      multi: true\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => CcCvvComponent),\n      multi: true\n    },\n    {\n      provide: MatFormFieldControl,\n      useExisting: forwardRef(() => CcCvvComponent),\n      multi: true\n    }\n  ]\n})\nexport class CcCvvComponent implements OnInit, OnDestroy, DoCheck, ControlValueAccessor, MatFormFieldControl<CcCvvComponent> {\n\n  static nextId = 0;\n  @Input() styleClass: string;\n  @Input()\n  get value() {\n    return this._value;\n  }\n  set value(cardNumber) {\n    this._value = cardNumber;\n    this.onChanges(cardNumber);\n    this.stateChanges.next();\n  }\n\n  @Input()\n  get placeholder() {\n    return this._placeholder;\n  }\n  set placeholder(placeholder: string) {\n    this._placeholder = placeholder;\n    this.stateChanges.next();\n  }\n\n  @Input()\n  get empty() {\n    return !(!!this.cardCvv);\n  }\n\n  @Input()\n  get required() {\n    return this._required;\n  }\n  set required(req: boolean) {\n    this._required = coerceBooleanProperty(req);\n    this.stateChanges.next();\n  }\n\n  @Input()\n  get disabled() {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(dis: boolean) {\n    this._disabled = coerceBooleanProperty(dis);\n    this.stateChanges.next();\n  }\n\n  @Input()\n  get defaultStyles() {\n    return this._defaultStyles;\n  }\n  set defaultStyles(val: any) {\n    this._defaultStyles = coerceBooleanProperty(val);\n  }\n\n  @Input('cvv-size')\n  get cvvSize(): number {\n    return this._cvvSize;\n  }\n  set cvvSize(value: number) {\n    this._cvvSize = value;\n    if (this.ngControl) {\n      this.ngControl.control.updateValueAndValidity();\n    }\n  }\n\n  // tslint:disable-next-line: variable-name\n  private _value: any;\n  // tslint:disable-next-line: variable-name\n  private _placeholder: string;\n  // tslint:disable-next-line: variable-name\n  private _disabled = false;\n  // tslint:disable-next-line: variable-name\n  private _defaultStyles = false;\n  // tslint:disable-next-line: variable-name\n  private _required = false;\n  // tslint:disable-next-line: variable-name\n  private _cvvSize: number;\n  // tslint:disable-next-line: variable-name\n  private _formSubmitSubscription: Subscription;\n  ngControl: NgControl = null;\n  focused = false;\n  errorState = false;\n  stateChanges = new Subject<void>();\n\n  cardCvv = '';\n  onChanges: any;\n  onTouched: any;\n  maxCvvLength = 4;\n\n  @HostBinding() id = `ngx-cc${CcCvvComponent.nextId}`;\n  @HostBinding('attr.aria-describedby') describedBy = '';\n  @HostBinding('class.floating')\n  get shouldLabelFloat() {\n    return this.focused || !this.empty;\n  }\n\n  constructor(\n    private injector: Injector,\n    private elRef: ElementRef<HTMLElement>,\n    private fm: FocusMonitor,\n    @Optional() private parentForm: NgForm,\n    @Optional() private parentFormGroup: FormGroupDirective,\n    private defaultErrorStateMatcher: ErrorStateMatcher,\n  ) {\n    const parent = this.parentFormGroup || this.parentForm;\n    if (parent){\n      this._formSubmitSubscription = parentFormGroup.ngSubmit.subscribe(() => {\n        this.ngControl.control.markAsTouched();\n      });\n    }\n\n    fm.monitor(elRef.nativeElement, true).subscribe(origin => {\n      this.focused = !!origin;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this.ngControl = this.injector.get(NgControl);\n    if (this.ngControl !== null) {\n      // Setting the value accessor directly (instead of using\n      // the providers) to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  validate(control: AbstractControl): ValidationErrors | null {\n    const cvv = validator.cvv(control.value, this.cvvSize);\n    return cvv.isValid ? null : { invalidCvv: true };\n  }\n\n  writeValue(val: string) {\n    this.cardCvv = val || '';\n  }\n\n  registerOnChange(fn: any) {\n    this.onChanges = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  setDescribedByIds(ids: string[]) {\n    this.describedBy = ids.join(' ');\n  }\n\n  onContainerClick(event: MouseEvent) {\n    if ((event.target as Element).tagName.toLowerCase() !== 'input') {\n      this.elRef.nativeElement.querySelector('input').focus();\n    }\n  }\n\n  updateCvv(event: Event) {\n    const value = (event.target as HTMLInputElement).value;\n    this.cardCvv = value;\n    this.onChanges(value);\n    this.ngControl.control.markAsDirty();\n  }\n\n  updateOnTouch() {\n    if (this.ngControl) {\n      this.onTouched(this.ngControl.control.value);\n      this.ngControl.control.markAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._formSubmitSubscription) {\n      this._formSubmitSubscription.unsubscribe();\n    }\n    this.fm.stopMonitoring(this.elRef.nativeElement);\n    this.stateChanges.complete();\n  }\n\n  updateErrorState() {\n    const oldState = this.errorState;\n    const parent = this.parentFormGroup || this.parentForm;\n    const matcher = this.defaultErrorStateMatcher;\n    const control = this.ngControl ? this.ngControl.control as FormControl : null;\n    const newState = matcher.isErrorState(control, parent);\n\n    if (newState !== oldState) {\n      this.errorState = newState;\n      this.stateChanges.next();\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { NgxCcComponent } from './ngx-cc.component';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { NumberOnlyDirective } from './directives/number-only/number-only.directive';\nimport { CcDateComponent } from './cc-date/cc-date.component';\nimport { FormatDateDirective } from './directives/format-date/format-date.directive';\nimport { CcCvvComponent } from './cc-cvv/cc-cvv.component';\nimport { CcConfig, CC_CARD_ICONS_TOKEN } from './ngx-cc.config';\nimport { externalCardIcons } from './ngx-cc.icons';\n\n@NgModule({\n  declarations: [\n    NgxCcComponent,\n    NumberOnlyDirective,\n    CcDateComponent,\n    FormatDateDirective,\n    CcCvvComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    MatInputModule,\n    MatFormFieldModule\n  ],\n  exports: [\n    NgxCcComponent,\n    CcDateComponent,\n    CcCvvComponent,\n    NumberOnlyDirective,\n    FormatDateDirective\n  ],\n})\nexport class NgxCcModule {\n  static forRoot(config: CcConfig): ModuleWithProviders<NgxCcModule> {\n    return {\n      ngModule: NgxCcModule,\n      providers: [\n        {\n          provide: CC_CARD_ICONS_TOKEN,\n          useValue: { ...externalCardIcons, ...config.cardIcons },\n        }\n      ]\n    };\n  }\n}\n"]}